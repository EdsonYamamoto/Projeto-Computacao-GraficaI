/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BulletHell;

import model.Shoot;
import model.Enemy;
import model.Base;
import model.Player;
import com.sun.glass.events.KeyEvent;
import controller.EnemyController;
import controller.GameController;
import controller.PlayerController;
import controller.ShootController;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import main.Colisao;
import model.EnemyData;
import service.Parser;

/**
 *
 * @author edson
 */
public class FrmJogo
        extends JFrame
        implements Runnable {

    private boolean left;
    private boolean right;
    private boolean up;
    private boolean down;
    private boolean fimJogo;
    private boolean keyRestart;
    private boolean tiro;
    private boolean invencibilidade;
    private long ultimoDano;
    private long ultimoTiro;

    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
        setSize(1000, 800);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            up = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            down = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        }else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tiro = true;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            up = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            down = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tiro = false;
        }
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        Parser.ParserMonsters("C:\\Users\\Edson\\Documents\\GIT\\ProjetoComputacaoGrafica\\BulletHell\\src\\dynamics\\testMonster.PraQueServeExtensao");
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        Graphics g;

        ArrayList<Base> lista = new ArrayList();
        ArrayList<Base> lixo = new ArrayList();

        Player player = new Player();
        try {
            player = PlayerController.InstanciarPlayer();
        } catch (IOException ex) {
            Logger.getLogger(FrmJogo.class.getName()).log(Level.SEVERE, null, ex);
        }
        player.setY(getHeight()/2-player.getAltura()/2);
        player.setX(getWidth()/2-player.getLargura()/2) ;
        lista.add(player);
 
        Random r = new Random();
        for (int i = 0; i < GameController.getLevel()*3; i++) {
            Enemy b = new Enemy();
            try {
                
                b = EnemyController.InstanciarInimigo(Parser.listaInimigos.get(r.nextInt(Parser.listaInimigos.size())));
                lista.add(b);
            } catch (IOException ex) {
                Logger.getLogger(FrmJogo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        while (true) {
            g = getBufferStrategy().getDrawGraphics();
            //Limpa a tela
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());
            //Desenha um oval

            long invencibilidadeTime = System.currentTimeMillis();

            for (Base b : lista) {
                if (player.colisao(b)) {
                    if(invencibilidadeTime > ultimoDano + 1000){
                        
                        invencibilidade=true;
                        ultimoDano = invencibilidadeTime;
                        player.setHealth(player.getHealth()-10);
                        ImageIcon img = new ImageIcon("/C:/Users/Edson/Documents/GIT/ProjetoComputacaoGrafica/BulletHell/build/classes/img/player1.png");
                        player.setImg(img);
                    }
                }
            }
            if(invencibilidadeTime>ultimoDano+1000) {
                ImageIcon img = new ImageIcon("/C:/Users/Edson/Documents/GIT/ProjetoComputacaoGrafica/BulletHell/build/classes/img/player.png");
                player.setImg(img);   
            }
            if (player.getHealth() > 0) {
                g.setColor(Color.BLACK);
                g.drawString("Life: " + String.valueOf(player.getHealth()) , 50, 50);
                fimJogo = true;
            }
            g.setColor(Color.BLACK);
            g.drawString( "X: "+String.valueOf(player.getX()) , 50, 75);
            g.drawString( "Y: "+String.valueOf(player.getY()) , 50, 100);
            g.drawString( "Points: "+GameController.getPoints() , 150, 50);
            fimJogo = true;

            for (Base b : lista) {
                if (!Enemy.class.isInstance(b)){
                    b.mover();                
                }
                else{
                    b.enemyMove(Enemy.class.cast(b));
                }
            }

            for (Base b : lista) {
                b.desenhar(g);
            }
            
            long tempo = System.currentTimeMillis();

            if(tiro  && tempo > ultimoTiro + 500){
                ultimoTiro = tempo;
                try {
                    lista.add(ShootController.InstanciarShoot(player));
                } catch (IOException ex) {
                    Logger.getLogger(FrmJogo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            //Método para testar colisão
            GameController.ColidiuAlgo(lista, lixo, player, getWidth(), getHeight());
            
            //Método para saber se o tiro acertou algo
            GameController.TiroAcertou(lista, lixo);

            try {
                //Método para saber se o tiro acertou algo
                EnemyController.InimigoFazAlgo(lista, g, tempo, player);
            } catch (IOException ex) {
                Logger.getLogger(FrmJogo.class.getName()).log(Level.SEVERE, null, ex);
            }

            lista.removeAll(lixo);
            lixo.clear();
            if (player.getHealth() <= 0) {
                fimJogo = false;
            }
            if (player.getHealth() > 0&& lista.size()==1) {
                g.setColor(Color.BLACK);
                GameController.setLevel(GameController.getLevel()+1);
                for (int i = 0; i < GameController.getLevel()*3; i++) {
                    Enemy b = new Enemy();
                    try {
                        b = EnemyController.InstanciarInimigo(Parser.listaInimigos.get(r.nextInt(Parser.listaInimigos.size())));
                    } catch (IOException ex) {
                        Logger.getLogger(FrmJogo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    b.setX(r.nextInt(getWidth()));
                    b.setY(r.nextInt(getHeight()));
                    lista.add(b);
                }
            }
            if (!fimJogo) {
                g.setColor(new Color(0,0,0));
                g.fillRect(0, 0, getWidth(),getHeight());
                g.setColor(new Color(255,255,255));
                g.drawString("FIM de JOGO - Tecle R para Reiniciar", getWidth()/2, getHeight()/2);
                
                if (keyRestart){
                    fimJogo = false;
                    for (int i = 1; i < lista.size(); i++) {
                        lixo.add(lista.get(i));                        
                    }
                    player.setHealth(100);
                    GameController.setLevel(1);
                    GameController.setPoints(0);
                }
            }
            PlayerController.PlayerPosition(player, left, right, up, down);
            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
            }
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
